/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.pw.model.impl;

import at.pw.model.Inventory;
import at.pw.model.InventoryModel;
import at.pw.model.InventorySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Inventory service. Represents a row in the &quot;pw_Inventory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.pw.model.InventoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InventoryImpl}.
 * </p>
 *
 * @author reihsr
 * @see InventoryImpl
 * @see at.pw.model.Inventory
 * @see at.pw.model.InventoryModel
 * @generated
 */
@JSON(strict = true)
public class InventoryModelImpl extends BaseModelImpl<Inventory>
	implements InventoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a inventory model instance should use the {@link at.pw.model.Inventory} interface instead.
	 */
	public static final String TABLE_NAME = "pw_Inventory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "inventoryId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "inventarnummer", Types.BIGINT },
			{ "webcontentId", Types.BIGINT },
			{ "folderId", Types.BIGINT },
			{ "structureId", Types.VARCHAR },
			{ "structuretemplateId", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table pw_Inventory (inventoryId LONG not null primary key,createDate DATE null,inventarnummer LONG,webcontentId LONG,folderId LONG,structureId VARCHAR(75) null,structuretemplateId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table pw_Inventory";
	public static final String ORDER_BY_JPQL = " ORDER BY inventory.inventoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY pw_Inventory.inventoryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.pw.model.Inventory"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.pw.model.Inventory"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.pw.model.Inventory"),
			true);
	public static long WEBCONTENTID_COLUMN_BITMASK = 1L;
	public static long INVENTORYID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Inventory toModel(InventorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Inventory model = new InventoryImpl();

		model.setInventoryId(soapModel.getInventoryId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setInventarnummer(soapModel.getInventarnummer());
		model.setWebcontentId(soapModel.getWebcontentId());
		model.setFolderId(soapModel.getFolderId());
		model.setStructureId(soapModel.getStructureId());
		model.setStructuretemplateId(soapModel.getStructuretemplateId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Inventory> toModels(InventorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Inventory> models = new ArrayList<Inventory>(soapModels.length);

		for (InventorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.pw.model.Inventory"));

	public InventoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _inventoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setInventoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _inventoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Inventory.class;
	}

	@Override
	public String getModelClassName() {
		return Inventory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("inventoryId", getInventoryId());
		attributes.put("createDate", getCreateDate());
		attributes.put("inventarnummer", getInventarnummer());
		attributes.put("webcontentId", getWebcontentId());
		attributes.put("folderId", getFolderId());
		attributes.put("structureId", getStructureId());
		attributes.put("structuretemplateId", getStructuretemplateId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long inventoryId = (Long)attributes.get("inventoryId");

		if (inventoryId != null) {
			setInventoryId(inventoryId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long inventarnummer = (Long)attributes.get("inventarnummer");

		if (inventarnummer != null) {
			setInventarnummer(inventarnummer);
		}

		Long webcontentId = (Long)attributes.get("webcontentId");

		if (webcontentId != null) {
			setWebcontentId(webcontentId);
		}

		Long folderId = (Long)attributes.get("folderId");

		if (folderId != null) {
			setFolderId(folderId);
		}

		String structureId = (String)attributes.get("structureId");

		if (structureId != null) {
			setStructureId(structureId);
		}

		String structuretemplateId = (String)attributes.get(
				"structuretemplateId");

		if (structuretemplateId != null) {
			setStructuretemplateId(structuretemplateId);
		}
	}

	@JSON
	@Override
	public long getInventoryId() {
		return _inventoryId;
	}

	@Override
	public void setInventoryId(long inventoryId) {
		_columnBitmask = -1L;

		_inventoryId = inventoryId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getInventarnummer() {
		return _inventarnummer;
	}

	@Override
	public void setInventarnummer(long inventarnummer) {
		_inventarnummer = inventarnummer;
	}

	@JSON
	@Override
	public long getWebcontentId() {
		return _webcontentId;
	}

	@Override
	public void setWebcontentId(long webcontentId) {
		_columnBitmask |= WEBCONTENTID_COLUMN_BITMASK;

		if (!_setOriginalWebcontentId) {
			_setOriginalWebcontentId = true;

			_originalWebcontentId = _webcontentId;
		}

		_webcontentId = webcontentId;
	}

	public long getOriginalWebcontentId() {
		return _originalWebcontentId;
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		_folderId = folderId;
	}

	@JSON
	@Override
	public String getStructureId() {
		if (_structureId == null) {
			return StringPool.BLANK;
		}
		else {
			return _structureId;
		}
	}

	@Override
	public void setStructureId(String structureId) {
		_structureId = structureId;
	}

	@JSON
	@Override
	public String getStructuretemplateId() {
		if (_structuretemplateId == null) {
			return StringPool.BLANK;
		}
		else {
			return _structuretemplateId;
		}
	}

	@Override
	public void setStructuretemplateId(String structuretemplateId) {
		_structuretemplateId = structuretemplateId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Inventory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Inventory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Inventory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InventoryImpl inventoryImpl = new InventoryImpl();

		inventoryImpl.setInventoryId(getInventoryId());
		inventoryImpl.setCreateDate(getCreateDate());
		inventoryImpl.setInventarnummer(getInventarnummer());
		inventoryImpl.setWebcontentId(getWebcontentId());
		inventoryImpl.setFolderId(getFolderId());
		inventoryImpl.setStructureId(getStructureId());
		inventoryImpl.setStructuretemplateId(getStructuretemplateId());

		inventoryImpl.resetOriginalValues();

		return inventoryImpl;
	}

	@Override
	public int compareTo(Inventory inventory) {
		int value = 0;

		if (getInventoryId() < inventory.getInventoryId()) {
			value = -1;
		}
		else if (getInventoryId() > inventory.getInventoryId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Inventory)) {
			return false;
		}

		Inventory inventory = (Inventory)obj;

		long primaryKey = inventory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		InventoryModelImpl inventoryModelImpl = this;

		inventoryModelImpl._originalWebcontentId = inventoryModelImpl._webcontentId;

		inventoryModelImpl._setOriginalWebcontentId = false;

		inventoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Inventory> toCacheModel() {
		InventoryCacheModel inventoryCacheModel = new InventoryCacheModel();

		inventoryCacheModel.inventoryId = getInventoryId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			inventoryCacheModel.createDate = createDate.getTime();
		}
		else {
			inventoryCacheModel.createDate = Long.MIN_VALUE;
		}

		inventoryCacheModel.inventarnummer = getInventarnummer();

		inventoryCacheModel.webcontentId = getWebcontentId();

		inventoryCacheModel.folderId = getFolderId();

		inventoryCacheModel.structureId = getStructureId();

		String structureId = inventoryCacheModel.structureId;

		if ((structureId != null) && (structureId.length() == 0)) {
			inventoryCacheModel.structureId = null;
		}

		inventoryCacheModel.structuretemplateId = getStructuretemplateId();

		String structuretemplateId = inventoryCacheModel.structuretemplateId;

		if ((structuretemplateId != null) &&
				(structuretemplateId.length() == 0)) {
			inventoryCacheModel.structuretemplateId = null;
		}

		return inventoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{inventoryId=");
		sb.append(getInventoryId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", inventarnummer=");
		sb.append(getInventarnummer());
		sb.append(", webcontentId=");
		sb.append(getWebcontentId());
		sb.append(", folderId=");
		sb.append(getFolderId());
		sb.append(", structureId=");
		sb.append(getStructureId());
		sb.append(", structuretemplateId=");
		sb.append(getStructuretemplateId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("at.pw.model.Inventory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>inventoryId</column-name><column-value><![CDATA[");
		sb.append(getInventoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inventarnummer</column-name><column-value><![CDATA[");
		sb.append(getInventarnummer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>webcontentId</column-name><column-value><![CDATA[");
		sb.append(getWebcontentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>folderId</column-name><column-value><![CDATA[");
		sb.append(getFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>structureId</column-name><column-value><![CDATA[");
		sb.append(getStructureId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>structuretemplateId</column-name><column-value><![CDATA[");
		sb.append(getStructuretemplateId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Inventory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Inventory.class
		};
	private long _inventoryId;
	private Date _createDate;
	private long _inventarnummer;
	private long _webcontentId;
	private long _originalWebcontentId;
	private boolean _setOriginalWebcontentId;
	private long _folderId;
	private String _structureId;
	private String _structuretemplateId;
	private long _columnBitmask;
	private Inventory _escapedModel;
}